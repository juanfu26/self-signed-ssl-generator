map $http_upgrade $connection_upgrade { 
    default upgrade; 
    '' close; 
}

#TLS termination (internal connections without https)
server {

	listen 443 ssl;
	listen [::]:443 ssl; #for IPv6

    server_name  mydomain.local;

    ssl_certificate     /certs/wildcard.mydomain.local.crt;
    ssl_certificate_key /certs/mydomain.local.key;
    
	ssl_session_cache shared:SSL:20m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;

    ssl_prefer_server_ciphers       on;
    ssl_protocols                   TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers                     ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS;

    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    #charset koi8-r;
    access_log  /var/log/nginx/host.access.log;

	#proxy_http_version 1.1;
    #proxy_set_header Upgrade $http_upgrade;
    #proxy_set_header Connection 'upgrade';
    #proxy_cache_bypass $http_upgrade;

	proxy_redirect off;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;

	include /etc/nginx/conf.d/locations/*.conf;
	
	# increase request timeout for server errors
	proxy_read_timeout 500;
	proxy_connect_timeout 500;
	proxy_send_timeout 500;
	
	#location / {
	#	root /data/www;
	#}
	
	error_page  404              /404.html;
	
    # redirect server error pages to the static page /50x.html
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
}

# redirect request in port 80 to 443
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;
    return 301 https://$host$request_uri;
}
